import xml
import yang.adata
import yang.gdata

# == This file is generated ==


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('l2transport')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('point-to-point')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('multipoint')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type(yang.adata.MNode):
    l2transport: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport
    point_to_point: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point
    multipoint: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint

    def __init__(self, l2transport: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport=None, point_to_point: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point=None, multipoint: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint=None):
        if l2transport is not None:
            self.l2transport = l2transport
        else:
            self.l2transport = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport()
        self_l2transport = self.l2transport
        if self_l2transport is not None:
            self_l2transport._parent = self
        if point_to_point is not None:
            self.point_to_point = point_to_point
        else:
            self.point_to_point = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point()
        self_point_to_point = self.point_to_point
        if self_point_to_point is not None:
            self_point_to_point._parent = self
        if multipoint is not None:
            self.multipoint = multipoint
        else:
            self.multipoint = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint()
        self_multipoint = self.multipoint
        if self_multipoint is not None:
            self_multipoint._parent = self

    def create_l2transport(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport()
        self.l2transport = res
        return res

    def create_point_to_point(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point()
        self.point_to_point = res
        return res

    def create_multipoint(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint()
        self.multipoint = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('sub-interface-type')
        _l2transport = self.l2transport
        _point_to_point = self.point_to_point
        _multipoint = self.multipoint
        if _l2transport is not None:
            res.children['l2transport'] = _l2transport.to_gdata()
        if _point_to_point is not None:
            res.children['point-to-point'] = _point_to_point.to_gdata()
        if _multipoint is not None:
            res.children['multipoint'] = _multipoint.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type(l2transport=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport.from_gdata(n.get_container("l2transport")), point_to_point=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point.from_gdata(n.get_container("point-to-point")), multipoint=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint.from_gdata(n.get_container("multipoint")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type(l2transport=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__l2transport.from_xml(yang.gdata.get_xml_child(n, "l2transport")), point_to_point=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__point_to_point.from_xml(yang.gdata.get_xml_child(n, "point-to-point")), multipoint=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type__multipoint.from_xml(yang.gdata.get_xml_child(n, "multipoint")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address(yang.adata.MNode):
    address: str
    netmask: str
    route_tag: ?int
    algorithm: ?int

    def __init__(self, address: str, netmask: str, route_tag: ?int, algorithm: ?int):
        self.address = address
        self.netmask = netmask
        self.route_tag = route_tag
        self.algorithm = algorithm

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('address')
        _address = self.address
        _netmask = self.netmask
        _route_tag = self.route_tag
        _algorithm = self.algorithm
        if _address is not None:
            res.children['address'] = yang.gdata.Leaf('address', _address)
        if _netmask is not None:
            res.children['netmask'] = yang.gdata.Leaf('netmask', _netmask)
        if _route_tag is not None:
            res.children['route-tag'] = yang.gdata.Leaf('route-tag', _route_tag)
        if _algorithm is not None:
            res.children['algorithm'] = yang.gdata.Leaf('algorithm', _algorithm)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address(address=n.get_str("address"), netmask=n.get_str("netmask"), route_tag=n.get_opt_int("route-tag"), algorithm=n.get_opt_int("algorithm"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address(address=yang.gdata.from_xml_str(n, "address"), netmask=yang.gdata.from_xml_str(n, "netmask"), route_tag=yang.gdata.from_xml_opt_int(n, "route-tag"), algorithm=yang.gdata.from_xml_opt_int(n, "algorithm"))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry(yang.adata.MNode):
    address: str
    netmask: str
    route_tag: ?int
    algorithm: ?int

    def __init__(self, address: str, netmask: str, route_tag: ?int, algorithm: ?int):
        self.address = address
        self.netmask = netmask
        self.route_tag = route_tag
        self.algorithm = algorithm

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.address)])
        _address = self.address
        _netmask = self.netmask
        _route_tag = self.route_tag
        _algorithm = self.algorithm
        if _address is not None:
            res.children['address'] = yang.gdata.Leaf('address', _address)
        if _netmask is not None:
            res.children['netmask'] = yang.gdata.Leaf('netmask', _netmask)
        if _route_tag is not None:
            res.children['route-tag'] = yang.gdata.Leaf('route-tag', _route_tag)
        if _algorithm is not None:
            res.children['algorithm'] = yang.gdata.Leaf('algorithm', _algorithm)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry(address=n.get_str("address"), netmask=n.get_str("netmask"), route_tag=n.get_opt_int("route-tag"), algorithm=n.get_opt_int("algorithm"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry(address=yang.gdata.from_xml_str(n, "address"), netmask=yang.gdata.from_xml_str(n, "netmask"), route_tag=yang.gdata.from_xml_opt_int(n, "route-tag"), algorithm=yang.gdata.from_xml_opt_int(n, "algorithm"))

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry]
    def __init__(self, elements=[]):
        self._name = 'secondary'
        self.elements = elements

    def create(self, address, netmask):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry(address, netmask)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('secondary', ['address'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries(yang.adata.MNode):
    secondary: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary

    def __init__(self, secondary: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary_entry]=[]):
        self.secondary = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary(elements=secondary)
        self.secondary._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('secondaries')
        _secondary = self.secondary
        if _secondary is not None:
            res.children['secondary'] = _secondary.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries(secondary=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary.from_gdata(n.get_list("secondary")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries(secondary=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries__secondary.from_xml(yang.gdata.get_xml_children(n, "secondary")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('dhcp')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses(yang.adata.MNode):
    address: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address
    secondaries: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries
    unnumbered: ?str
    dhcp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp

    def __init__(self, address: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address=None, secondaries: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries=None, unnumbered: ?str, dhcp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp=None):
        self.address = address
        self_address = self.address
        if self_address is not None:
            self_address._parent = self
        if secondaries is not None:
            self.secondaries = secondaries
        else:
            self.secondaries = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries()
        self_secondaries = self.secondaries
        if self_secondaries is not None:
            self_secondaries._parent = self
        self.unnumbered = unnumbered
        if dhcp is not None:
            self.dhcp = dhcp
        else:
            self.dhcp = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp()
        self_dhcp = self.dhcp
        if self_dhcp is not None:
            self_dhcp._parent = self

    def create_address(self, address, netmask):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address(address, netmask)
        self.address = res
        return res

    def create_dhcp(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp()
        self.dhcp = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('addresses')
        _address = self.address
        _secondaries = self.secondaries
        _unnumbered = self.unnumbered
        _dhcp = self.dhcp
        if _address is not None:
            res.children['address'] = _address.to_gdata()
        if _secondaries is not None:
            res.children['secondaries'] = _secondaries.to_gdata()
        if _unnumbered is not None:
            res.children['unnumbered'] = yang.gdata.Leaf('unnumbered', _unnumbered)
        if _dhcp is not None:
            res.children['dhcp'] = _dhcp.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses(address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address.from_gdata(n.get_container("address")), secondaries=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries.from_gdata(n.get_container("secondaries")), unnumbered=n.get_opt_str("unnumbered"), dhcp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp.from_gdata(n.get_container("dhcp")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses(address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__address.from_xml(yang.gdata.get_xml_child(n, "address")), secondaries=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__secondaries.from_xml(yang.gdata.get_xml_child(n, "secondaries")), unnumbered=yang.gdata.from_xml_opt_str(n, "unnumbered"), dhcp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses__dhcp.from_xml(yang.gdata.get_xml_child(n, "dhcp")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4(yang.adata.MNode):
    addresses: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses

    def __init__(self, addresses: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses=None):
        if addresses is not None:
            self.addresses = addresses
        else:
            self.addresses = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses()
        self_addresses = self.addresses
        if self_addresses is not None:
            self_addresses._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('ipv4')
        _addresses = self.addresses
        if _addresses is not None:
            res.children['addresses'] = _addresses.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4(addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses.from_gdata(n.get_container("addresses")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4(addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4__addresses.from_xml(yang.gdata.get_xml_child(n, "addresses")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address_entry(yang.adata.MNode):
    address: str
    prefix_length: int
    zone: str
    route_tag: ?int
    algorithm: ?int

    def __init__(self, address: str, prefix_length: int, zone: str, route_tag: ?int, algorithm: ?int):
        self.address = address
        self.prefix_length = prefix_length
        self.zone = zone
        self.route_tag = route_tag
        self.algorithm = algorithm

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.address)])
        _address = self.address
        _prefix_length = self.prefix_length
        _zone = self.zone
        _route_tag = self.route_tag
        _algorithm = self.algorithm
        if _address is not None:
            res.children['address'] = yang.gdata.Leaf('address', _address)
        if _prefix_length is not None:
            res.children['prefix-length'] = yang.gdata.Leaf('prefix-length', _prefix_length)
        if _zone is not None:
            res.children['zone'] = yang.gdata.Leaf('zone', _zone)
        if _route_tag is not None:
            res.children['route-tag'] = yang.gdata.Leaf('route-tag', _route_tag)
        if _algorithm is not None:
            res.children['algorithm'] = yang.gdata.Leaf('algorithm', _algorithm)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address_entry(address=n.get_str("address"), prefix_length=n.get_int("prefix-length"), zone=n.get_str("zone"), route_tag=n.get_opt_int("route-tag"), algorithm=n.get_opt_int("algorithm"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address_entry(address=yang.gdata.from_xml_str(n, "address"), prefix_length=yang.gdata.from_xml_int(n, "prefix-length"), zone=yang.gdata.from_xml_str(n, "zone"), route_tag=yang.gdata.from_xml_opt_int(n, "route-tag"), algorithm=yang.gdata.from_xml_opt_int(n, "algorithm"))

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address_entry]
    def __init__(self, elements=[]):
        self._name = 'ipv6-address'
        self.elements = elements

    def create(self, address, prefix_length, zone):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address_entry(address, prefix_length, zone)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('ipv6-address', ['address'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__link_local_address(yang.adata.MNode):
    address: str
    zone: str
    route_tag: ?int

    def __init__(self, address: str, zone: str, route_tag: ?int):
        self.address = address
        self.zone = zone
        self.route_tag = route_tag

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('link-local-address')
        _address = self.address
        _zone = self.zone
        _route_tag = self.route_tag
        if _address is not None:
            res.children['address'] = yang.gdata.Leaf('address', _address)
        if _zone is not None:
            res.children['zone'] = yang.gdata.Leaf('zone', _zone)
        if _route_tag is not None:
            res.children['route-tag'] = yang.gdata.Leaf('route-tag', _route_tag)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__link_local_address:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__link_local_address(address=n.get_str("address"), zone=n.get_str("zone"), route_tag=n.get_opt_int("route-tag"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__link_local_address:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__link_local_address(address=yang.gdata.from_xml_str(n, "address"), zone=yang.gdata.from_xml_str(n, "zone"), route_tag=yang.gdata.from_xml_opt_int(n, "route-tag"))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address_entry(yang.adata.MNode):
    address: str
    prefix_length: int
    zone: str
    route_tag: ?int
    algorithm: ?int

    def __init__(self, address: str, prefix_length: int, zone: str, route_tag: ?int, algorithm: ?int):
        self.address = address
        self.prefix_length = prefix_length
        self.zone = zone
        self.route_tag = route_tag
        self.algorithm = algorithm

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.address)])
        _address = self.address
        _prefix_length = self.prefix_length
        _zone = self.zone
        _route_tag = self.route_tag
        _algorithm = self.algorithm
        if _address is not None:
            res.children['address'] = yang.gdata.Leaf('address', _address)
        if _prefix_length is not None:
            res.children['prefix-length'] = yang.gdata.Leaf('prefix-length', _prefix_length)
        if _zone is not None:
            res.children['zone'] = yang.gdata.Leaf('zone', _zone)
        if _route_tag is not None:
            res.children['route-tag'] = yang.gdata.Leaf('route-tag', _route_tag)
        if _algorithm is not None:
            res.children['algorithm'] = yang.gdata.Leaf('algorithm', _algorithm)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address_entry(address=n.get_str("address"), prefix_length=n.get_int("prefix-length"), zone=n.get_str("zone"), route_tag=n.get_opt_int("route-tag"), algorithm=n.get_opt_int("algorithm"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address_entry(address=yang.gdata.from_xml_str(n, "address"), prefix_length=yang.gdata.from_xml_int(n, "prefix-length"), zone=yang.gdata.from_xml_str(n, "zone"), route_tag=yang.gdata.from_xml_opt_int(n, "route-tag"), algorithm=yang.gdata.from_xml_opt_int(n, "algorithm"))

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address_entry]
    def __init__(self, elements=[]):
        self._name = 'eui64-address'
        self.elements = elements

    def create(self, address, prefix_length, zone):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address_entry(address, prefix_length, zone)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('eui64-address', ['address'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses(yang.adata.MNode):
    eui64_address: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address

    def __init__(self, eui64_address: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address_entry]=[]):
        self.eui64_address = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address(elements=eui64_address)
        self.eui64_address._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('eui64-addresses')
        _eui64_address = self.eui64_address
        if _eui64_address is not None:
            res.children['eui64-address'] = _eui64_address.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses(eui64_address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address.from_gdata(n.get_list("eui64-address")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses(eui64_address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses__eui64_address.from_xml(yang.gdata.get_xml_children(n, "eui64-address")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__autoconfig(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('autoconfig')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__autoconfig:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__autoconfig()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__autoconfig:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__autoconfig()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('dhcp')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp_client_options(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('dhcp-client-options')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp_client_options:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp_client_options()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp_client_options:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp_client_options()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses(yang.adata.MNode):
    ipv6_address: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address
    link_local_address: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__link_local_address
    eui64_addresses: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses
    autoconfig: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__autoconfig
    dhcp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp
    dhcp_client_options: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp_client_options

    def __init__(self, ipv6_address: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address_entry]=[], link_local_address: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__link_local_address=None, eui64_addresses: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses=None, autoconfig: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__autoconfig=None, dhcp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp=None, dhcp_client_options: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp_client_options=None):
        self.ipv6_address = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address(elements=ipv6_address)
        self.ipv6_address._parent = self
        self.link_local_address = link_local_address
        self_link_local_address = self.link_local_address
        if self_link_local_address is not None:
            self_link_local_address._parent = self
        if eui64_addresses is not None:
            self.eui64_addresses = eui64_addresses
        else:
            self.eui64_addresses = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses()
        self_eui64_addresses = self.eui64_addresses
        if self_eui64_addresses is not None:
            self_eui64_addresses._parent = self
        if autoconfig is not None:
            self.autoconfig = autoconfig
        else:
            self.autoconfig = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__autoconfig()
        self_autoconfig = self.autoconfig
        if self_autoconfig is not None:
            self_autoconfig._parent = self
        if dhcp is not None:
            self.dhcp = dhcp
        else:
            self.dhcp = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp()
        self_dhcp = self.dhcp
        if self_dhcp is not None:
            self_dhcp._parent = self
        if dhcp_client_options is not None:
            self.dhcp_client_options = dhcp_client_options
        else:
            self.dhcp_client_options = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp_client_options()
        self_dhcp_client_options = self.dhcp_client_options
        if self_dhcp_client_options is not None:
            self_dhcp_client_options._parent = self

    def create_link_local_address(self, address, zone):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__link_local_address(address, zone)
        self.link_local_address = res
        return res

    def create_autoconfig(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__autoconfig()
        self.autoconfig = res
        return res

    def create_dhcp(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp()
        self.dhcp = res
        return res

    def create_dhcp_client_options(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp_client_options()
        self.dhcp_client_options = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('addresses')
        _ipv6_address = self.ipv6_address
        _link_local_address = self.link_local_address
        _eui64_addresses = self.eui64_addresses
        _autoconfig = self.autoconfig
        _dhcp = self.dhcp
        _dhcp_client_options = self.dhcp_client_options
        if _ipv6_address is not None:
            res.children['ipv6-address'] = _ipv6_address.to_gdata()
        if _link_local_address is not None:
            res.children['link-local-address'] = _link_local_address.to_gdata()
        if _eui64_addresses is not None:
            res.children['eui64-addresses'] = _eui64_addresses.to_gdata()
        if _autoconfig is not None:
            res.children['autoconfig'] = _autoconfig.to_gdata()
        if _dhcp is not None:
            res.children['dhcp'] = _dhcp.to_gdata()
        if _dhcp_client_options is not None:
            res.children['dhcp-client-options'] = _dhcp_client_options.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses(ipv6_address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address.from_gdata(n.get_list("ipv6-address")), link_local_address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__link_local_address.from_gdata(n.get_container("link-local-address")), eui64_addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses.from_gdata(n.get_container("eui64-addresses")), autoconfig=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__autoconfig.from_gdata(n.get_container("autoconfig")), dhcp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp.from_gdata(n.get_container("dhcp")), dhcp_client_options=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp_client_options.from_gdata(n.get_container("dhcp-client-options")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses(ipv6_address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__ipv6_address.from_xml(yang.gdata.get_xml_children(n, "ipv6-address")), link_local_address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__link_local_address.from_xml(yang.gdata.get_xml_child(n, "link-local-address")), eui64_addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__eui64_addresses.from_xml(yang.gdata.get_xml_child(n, "eui64-addresses")), autoconfig=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__autoconfig.from_xml(yang.gdata.get_xml_child(n, "autoconfig")), dhcp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp.from_xml(yang.gdata.get_xml_child(n, "dhcp")), dhcp_client_options=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses__dhcp_client_options.from_xml(yang.gdata.get_xml_child(n, "dhcp-client-options")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__enable(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('enable')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__enable:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__enable()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__enable:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__enable()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6(yang.adata.MNode):
    addresses: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses
    enable: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__enable

    def __init__(self, addresses: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses=None, enable: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__enable=None):
        if addresses is not None:
            self.addresses = addresses
        else:
            self.addresses = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses()
        self_addresses = self.addresses
        if self_addresses is not None:
            self_addresses._parent = self
        if enable is not None:
            self.enable = enable
        else:
            self.enable = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__enable()
        self_enable = self.enable
        if self_enable is not None:
            self_enable._parent = self

    def create_enable(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__enable()
        self.enable = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('ipv6')
        _addresses = self.addresses
        _enable = self.enable
        if _addresses is not None:
            res.children['addresses'] = _addresses.to_gdata()
        if _enable is not None:
            res.children['enable'] = _enable.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6(addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses.from_gdata(n.get_container("addresses")), enable=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__enable.from_gdata(n.get_container("enable")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6(addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__addresses.from_xml(yang.gdata.get_xml_child(n, "addresses")), enable=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6__enable.from_xml(yang.gdata.get_xml_child(n, "enable")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty(yang.adata.MNode):
    value: int

    def __init__(self, value: int):
        self.value = value

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('restart-penalty')
        _value = self.value
        if _value is not None:
            res.children['value'] = yang.gdata.Leaf('value', _value)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty(value=n.get_int("value"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty(value=yang.gdata.from_xml_int(n, "value"))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time(yang.adata.MNode):
    value: int
    restart_penalty: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty

    def __init__(self, value: int, restart_penalty: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty=None):
        self.value = value
        self.restart_penalty = restart_penalty
        self_restart_penalty = self.restart_penalty
        if self_restart_penalty is not None:
            self_restart_penalty._parent = self

    def create_restart_penalty(self, value):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty(value)
        self.restart_penalty = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('max-suppress-time')
        _value = self.value
        _restart_penalty = self.restart_penalty
        if _value is not None:
            res.children['value'] = yang.gdata.Leaf('value', _value)
        if _restart_penalty is not None:
            res.children['restart-penalty'] = _restart_penalty.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time(value=n.get_int("value"), restart_penalty=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty.from_gdata(n.get_container("restart-penalty")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time(value=yang.gdata.from_xml_int(n, "value"), restart_penalty=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty.from_xml(yang.gdata.get_xml_child(n, "restart-penalty")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold(yang.adata.MNode):
    value: int
    max_suppress_time: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time

    def __init__(self, value: int, max_suppress_time: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time=None):
        self.value = value
        self.max_suppress_time = max_suppress_time
        self_max_suppress_time = self.max_suppress_time
        if self_max_suppress_time is not None:
            self_max_suppress_time._parent = self

    def create_max_suppress_time(self, value, restart_penalty):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time(value, restart_penalty)
        self.max_suppress_time = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('suppress-threshold')
        _value = self.value
        _max_suppress_time = self.max_suppress_time
        if _value is not None:
            res.children['value'] = yang.gdata.Leaf('value', _value)
        if _max_suppress_time is not None:
            res.children['max-suppress-time'] = _max_suppress_time.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold(value=n.get_int("value"), max_suppress_time=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time.from_gdata(n.get_container("max-suppress-time")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold(value=yang.gdata.from_xml_int(n, "value"), max_suppress_time=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time.from_xml(yang.gdata.get_xml_child(n, "max-suppress-time")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold(yang.adata.MNode):
    value: int
    suppress_threshold: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold

    def __init__(self, value: int, suppress_threshold: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold=None):
        self.value = value
        self.suppress_threshold = suppress_threshold
        self_suppress_threshold = self.suppress_threshold
        if self_suppress_threshold is not None:
            self_suppress_threshold._parent = self

    def create_suppress_threshold(self, value, max_suppress_time):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold(value, max_suppress_time)
        self.suppress_threshold = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('reuse-threshold')
        _value = self.value
        _suppress_threshold = self.suppress_threshold
        if _value is not None:
            res.children['value'] = yang.gdata.Leaf('value', _value)
        if _suppress_threshold is not None:
            res.children['suppress-threshold'] = _suppress_threshold.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold(value=n.get_int("value"), suppress_threshold=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold.from_gdata(n.get_container("suppress-threshold")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold(value=yang.gdata.from_xml_int(n, "value"), suppress_threshold=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold__suppress_threshold.from_xml(yang.gdata.get_xml_child(n, "suppress-threshold")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life(yang.adata.MNode):
    value: int
    reuse_threshold: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold

    def __init__(self, value: int, reuse_threshold: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold=None):
        self.value = value
        self.reuse_threshold = reuse_threshold
        self_reuse_threshold = self.reuse_threshold
        if self_reuse_threshold is not None:
            self_reuse_threshold._parent = self

    def create_reuse_threshold(self, value, suppress_threshold):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold(value, suppress_threshold)
        self.reuse_threshold = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('decay-half-life')
        _value = self.value
        _reuse_threshold = self.reuse_threshold
        if _value is not None:
            res.children['value'] = yang.gdata.Leaf('value', _value)
        if _reuse_threshold is not None:
            res.children['reuse-threshold'] = _reuse_threshold.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life(value=n.get_int("value"), reuse_threshold=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold.from_gdata(n.get_container("reuse-threshold")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life(value=yang.gdata.from_xml_int(n, "value"), reuse_threshold=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life__reuse_threshold.from_xml(yang.gdata.get_xml_child(n, "reuse-threshold")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening(yang.adata.MNode):
    decay_half_life: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life

    def __init__(self, decay_half_life: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life=None):
        self.decay_half_life = decay_half_life
        self_decay_half_life = self.decay_half_life
        if self_decay_half_life is not None:
            self_decay_half_life._parent = self

    def create_decay_half_life(self, value, reuse_threshold):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life(value, reuse_threshold)
        self.decay_half_life = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('dampening')
        _decay_half_life = self.decay_half_life
        if _decay_half_life is not None:
            res.children['decay-half-life'] = _decay_half_life.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening(decay_half_life=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life.from_gdata(n.get_container("decay-half-life")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening(decay_half_life=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening__decay_half_life.from_xml(yang.gdata.get_xml_child(n, "decay-half-life")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('ppp')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('hdlc')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('mfr')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('IETF')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay(yang.adata.MNode):
    IETF: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF

    def __init__(self, IETF: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF=None):
        if IETF is not None:
            self.IETF = IETF
        else:
            self.IETF = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF()
        self_IETF = self.IETF
        if self_IETF is not None:
            self_IETF._parent = self

    def create_IETF(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF()
        self.IETF = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('frame-relay')
        _IETF = self.IETF
        if _IETF is not None:
            res.children['IETF'] = _IETF.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay(IETF=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF.from_gdata(n.get_container("IETF")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay(IETF=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay__IETF.from_xml(yang.gdata.get_xml_child(n, "IETF")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation(yang.adata.MNode):
    ppp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp
    hdlc: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc
    mfr: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr
    frame_relay: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay

    def __init__(self, ppp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp=None, hdlc: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc=None, mfr: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr=None, frame_relay: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay=None):
        if ppp is not None:
            self.ppp = ppp
        else:
            self.ppp = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp()
        self_ppp = self.ppp
        if self_ppp is not None:
            self_ppp._parent = self
        if hdlc is not None:
            self.hdlc = hdlc
        else:
            self.hdlc = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc()
        self_hdlc = self.hdlc
        if self_hdlc is not None:
            self_hdlc._parent = self
        if mfr is not None:
            self.mfr = mfr
        else:
            self.mfr = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr()
        self_mfr = self.mfr
        if self_mfr is not None:
            self_mfr._parent = self
        if frame_relay is not None:
            self.frame_relay = frame_relay
        else:
            self.frame_relay = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay()
        self_frame_relay = self.frame_relay
        if self_frame_relay is not None:
            self_frame_relay._parent = self

    def create_ppp(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp()
        self.ppp = res
        return res

    def create_hdlc(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc()
        self.hdlc = res
        return res

    def create_mfr(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr()
        self.mfr = res
        return res

    def create_frame_relay(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay()
        self.frame_relay = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('encapsulation')
        _ppp = self.ppp
        _hdlc = self.hdlc
        _mfr = self.mfr
        _frame_relay = self.frame_relay
        if _ppp is not None:
            res.children['ppp'] = _ppp.to_gdata()
        if _hdlc is not None:
            res.children['hdlc'] = _hdlc.to_gdata()
        if _mfr is not None:
            res.children['mfr'] = _mfr.to_gdata()
        if _frame_relay is not None:
            res.children['frame-relay'] = _frame_relay.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation(ppp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp.from_gdata(n.get_container("ppp")), hdlc=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc.from_gdata(n.get_container("hdlc")), mfr=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr.from_gdata(n.get_container("mfr")), frame_relay=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay.from_gdata(n.get_container("frame-relay")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation(ppp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__ppp.from_xml(yang.gdata.get_xml_child(n, "ppp")), hdlc=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__hdlc.from_xml(yang.gdata.get_xml_child(n, "hdlc")), mfr=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__mfr.from_xml(yang.gdata.get_xml_child(n, "mfr")), frame_relay=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation__frame_relay.from_xml(yang.gdata.get_xml_child(n, "frame-relay")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__shutdown(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('shutdown')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__shutdown:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__shutdown()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__shutdown:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__shutdown()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events__link_status(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('link-status')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events__link_status:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events__link_status()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events__link_status:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events__link_status()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events(yang.adata.MNode):
    link_status: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events__link_status

    def __init__(self, link_status: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events__link_status=None):
        if link_status is not None:
            self.link_status = link_status
        else:
            self.link_status = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events__link_status()
        self_link_status = self.link_status
        if self_link_status is not None:
            self_link_status._parent = self

    def create_link_status(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events__link_status()
        self.link_status = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('events')
        _link_status = self.link_status
        if _link_status is not None:
            res.children['link-status'] = _link_status.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events(link_status=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events__link_status.from_gdata(n.get_container("link-status")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events(link_status=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events__link_status.from_xml(yang.gdata.get_xml_child(n, "link-status")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging(yang.adata.MNode):
    events: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events

    def __init__(self, events: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events=None):
        if events is not None:
            self.events = events
        else:
            self.events = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events()
        self_events = self.events
        if self_events is not None:
            self_events._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('logging')
        _events = self.events
        if _events is not None:
            res.children['events'] = _events.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging(events=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events.from_gdata(n.get_container("events")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging(events=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging__events.from_xml(yang.gdata.get_xml_child(n, "events")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry(yang.adata.MNode):
    interface_name: str
    sub_interface_type: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type
    ipv4: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4
    ipv6: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6
    dampening: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening
    encapsulation: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation
    shutdown: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__shutdown
    mtu: ?int
    logging: Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging
    bandwidth: ?int
    description: ?str

    def __init__(self, interface_name: str, sub_interface_type: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type=None, ipv4: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4=None, ipv6: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6=None, dampening: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening=None, encapsulation: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation=None, shutdown: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__shutdown=None, mtu: ?int, logging: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging=None, bandwidth: ?int, description: ?str):
        self.interface_name = interface_name
        if sub_interface_type is not None:
            self.sub_interface_type = sub_interface_type
        else:
            self.sub_interface_type = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type()
        self_sub_interface_type = self.sub_interface_type
        if self_sub_interface_type is not None:
            self_sub_interface_type._parent = self
        if ipv4 is not None:
            self.ipv4 = ipv4
        else:
            self.ipv4 = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4()
        self_ipv4 = self.ipv4
        if self_ipv4 is not None:
            self_ipv4._parent = self
        if ipv6 is not None:
            self.ipv6 = ipv6
        else:
            self.ipv6 = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6()
        self_ipv6 = self.ipv6
        if self_ipv6 is not None:
            self_ipv6._parent = self
        if dampening is not None:
            self.dampening = dampening
        else:
            self.dampening = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening()
        self_dampening = self.dampening
        if self_dampening is not None:
            self_dampening._parent = self
        if encapsulation is not None:
            self.encapsulation = encapsulation
        else:
            self.encapsulation = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation()
        self_encapsulation = self.encapsulation
        if self_encapsulation is not None:
            self_encapsulation._parent = self
        if shutdown is not None:
            self.shutdown = shutdown
        else:
            self.shutdown = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__shutdown()
        self_shutdown = self.shutdown
        if self_shutdown is not None:
            self_shutdown._parent = self
        self.mtu = mtu
        if logging is not None:
            self.logging = logging
        else:
            self.logging = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging()
        self_logging = self.logging
        if self_logging is not None:
            self_logging._parent = self
        self.bandwidth = bandwidth
        self.description = description

    def create_dampening(self, decay_half_life):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening(decay_half_life)
        self.dampening = res
        return res

    def create_shutdown(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface__shutdown()
        self.shutdown = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.interface_name)])
        _interface_name = self.interface_name
        _sub_interface_type = self.sub_interface_type
        _ipv4 = self.ipv4
        _ipv6 = self.ipv6
        _dampening = self.dampening
        _encapsulation = self.encapsulation
        _shutdown = self.shutdown
        _mtu = self.mtu
        _logging = self.logging
        _bandwidth = self.bandwidth
        _description = self.description
        if _interface_name is not None:
            res.children['interface-name'] = yang.gdata.Leaf('interface-name', _interface_name)
        if _sub_interface_type is not None:
            res.children['sub-interface-type'] = _sub_interface_type.to_gdata()
        if _ipv4 is not None:
            res.children['ipv4'] = _ipv4.to_gdata()
        if _ipv6 is not None:
            res.children['ipv6'] = _ipv6.to_gdata()
        if _dampening is not None:
            res.children['dampening'] = _dampening.to_gdata()
        if _encapsulation is not None:
            res.children['encapsulation'] = _encapsulation.to_gdata()
        if _shutdown is not None:
            res.children['shutdown'] = _shutdown.to_gdata()
        if _mtu is not None:
            res.children['mtu'] = yang.gdata.Leaf('mtu', _mtu)
        if _logging is not None:
            res.children['logging'] = _logging.to_gdata()
        if _bandwidth is not None:
            res.children['bandwidth'] = yang.gdata.Leaf('bandwidth', _bandwidth)
        if _description is not None:
            res.children['description'] = yang.gdata.Leaf('description', _description)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry(interface_name=n.get_str("interface-name"), sub_interface_type=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type.from_gdata(n.get_container("sub-interface-type")), ipv4=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4.from_gdata(n.get_container("ipv4")), ipv6=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6.from_gdata(n.get_container("ipv6")), dampening=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening.from_gdata(n.get_container("dampening")), encapsulation=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation.from_gdata(n.get_container("encapsulation")), shutdown=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__shutdown.from_gdata(n.get_container("shutdown")), mtu=n.get_opt_int("mtu"), logging=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging.from_gdata(n.get_container("logging")), bandwidth=n.get_opt_int("bandwidth"), description=n.get_opt_str("description"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry(interface_name=yang.gdata.from_xml_str(n, "interface-name"), sub_interface_type=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__sub_interface_type.from_xml(yang.gdata.get_xml_child(n, "sub-interface-type")), ipv4=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv4.from_xml(yang.gdata.get_xml_child(n, "ipv4")), ipv6=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__ipv6.from_xml(yang.gdata.get_xml_child(n, "ipv6")), dampening=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__dampening.from_xml(yang.gdata.get_xml_child(n, "dampening")), encapsulation=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__encapsulation.from_xml(yang.gdata.get_xml_child(n, "encapsulation")), shutdown=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__shutdown.from_xml(yang.gdata.get_xml_child(n, "shutdown")), mtu=yang.gdata.from_xml_opt_int(n, "mtu"), logging=Cisco_IOS_XR_um_interface_cfg__interfaces__interface__logging.from_xml(yang.gdata.get_xml_child(n, "logging")), bandwidth=yang.gdata.from_xml_opt_int(n, "bandwidth"), description=yang.gdata.from_xml_opt_str(n, "description"))

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry]
    def __init__(self, elements=[]):
        self._name = 'interface'
        self.elements = elements

    def create(self, interface_name):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry(interface_name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('interface', ['interface-name'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__l2transport(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('l2transport')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__l2transport:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__l2transport()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__l2transport:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__l2transport()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__point_to_point(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('point-to-point')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__point_to_point:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__point_to_point()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__point_to_point:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__point_to_point()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__multipoint(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('multipoint')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__multipoint:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__multipoint()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__multipoint:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__multipoint()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type(yang.adata.MNode):
    l2transport: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__l2transport
    point_to_point: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__point_to_point
    multipoint: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__multipoint

    def __init__(self, l2transport: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__l2transport=None, point_to_point: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__point_to_point=None, multipoint: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__multipoint=None):
        if l2transport is not None:
            self.l2transport = l2transport
        else:
            self.l2transport = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__l2transport()
        self_l2transport = self.l2transport
        if self_l2transport is not None:
            self_l2transport._parent = self
        if point_to_point is not None:
            self.point_to_point = point_to_point
        else:
            self.point_to_point = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__point_to_point()
        self_point_to_point = self.point_to_point
        if self_point_to_point is not None:
            self_point_to_point._parent = self
        if multipoint is not None:
            self.multipoint = multipoint
        else:
            self.multipoint = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__multipoint()
        self_multipoint = self.multipoint
        if self_multipoint is not None:
            self_multipoint._parent = self

    def create_l2transport(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__l2transport()
        self.l2transport = res
        return res

    def create_point_to_point(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__point_to_point()
        self.point_to_point = res
        return res

    def create_multipoint(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__multipoint()
        self.multipoint = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('sub-interface-type')
        _l2transport = self.l2transport
        _point_to_point = self.point_to_point
        _multipoint = self.multipoint
        if _l2transport is not None:
            res.children['l2transport'] = _l2transport.to_gdata()
        if _point_to_point is not None:
            res.children['point-to-point'] = _point_to_point.to_gdata()
        if _multipoint is not None:
            res.children['multipoint'] = _multipoint.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type(l2transport=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__l2transport.from_gdata(n.get_container("l2transport")), point_to_point=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__point_to_point.from_gdata(n.get_container("point-to-point")), multipoint=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__multipoint.from_gdata(n.get_container("multipoint")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type(l2transport=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__l2transport.from_xml(yang.gdata.get_xml_child(n, "l2transport")), point_to_point=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__point_to_point.from_xml(yang.gdata.get_xml_child(n, "point-to-point")), multipoint=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type__multipoint.from_xml(yang.gdata.get_xml_child(n, "multipoint")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__address(yang.adata.MNode):
    address: str
    netmask: str
    route_tag: ?int
    algorithm: ?int

    def __init__(self, address: str, netmask: str, route_tag: ?int, algorithm: ?int):
        self.address = address
        self.netmask = netmask
        self.route_tag = route_tag
        self.algorithm = algorithm

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('address')
        _address = self.address
        _netmask = self.netmask
        _route_tag = self.route_tag
        _algorithm = self.algorithm
        if _address is not None:
            res.children['address'] = yang.gdata.Leaf('address', _address)
        if _netmask is not None:
            res.children['netmask'] = yang.gdata.Leaf('netmask', _netmask)
        if _route_tag is not None:
            res.children['route-tag'] = yang.gdata.Leaf('route-tag', _route_tag)
        if _algorithm is not None:
            res.children['algorithm'] = yang.gdata.Leaf('algorithm', _algorithm)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__address:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__address(address=n.get_str("address"), netmask=n.get_str("netmask"), route_tag=n.get_opt_int("route-tag"), algorithm=n.get_opt_int("algorithm"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__address:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__address(address=yang.gdata.from_xml_str(n, "address"), netmask=yang.gdata.from_xml_str(n, "netmask"), route_tag=yang.gdata.from_xml_opt_int(n, "route-tag"), algorithm=yang.gdata.from_xml_opt_int(n, "algorithm"))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary_entry(yang.adata.MNode):
    address: str
    netmask: str
    route_tag: ?int
    algorithm: ?int

    def __init__(self, address: str, netmask: str, route_tag: ?int, algorithm: ?int):
        self.address = address
        self.netmask = netmask
        self.route_tag = route_tag
        self.algorithm = algorithm

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.address)])
        _address = self.address
        _netmask = self.netmask
        _route_tag = self.route_tag
        _algorithm = self.algorithm
        if _address is not None:
            res.children['address'] = yang.gdata.Leaf('address', _address)
        if _netmask is not None:
            res.children['netmask'] = yang.gdata.Leaf('netmask', _netmask)
        if _route_tag is not None:
            res.children['route-tag'] = yang.gdata.Leaf('route-tag', _route_tag)
        if _algorithm is not None:
            res.children['algorithm'] = yang.gdata.Leaf('algorithm', _algorithm)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary_entry(address=n.get_str("address"), netmask=n.get_str("netmask"), route_tag=n.get_opt_int("route-tag"), algorithm=n.get_opt_int("algorithm"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary_entry(address=yang.gdata.from_xml_str(n, "address"), netmask=yang.gdata.from_xml_str(n, "netmask"), route_tag=yang.gdata.from_xml_opt_int(n, "route-tag"), algorithm=yang.gdata.from_xml_opt_int(n, "algorithm"))

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary_entry]
    def __init__(self, elements=[]):
        self._name = 'secondary'
        self.elements = elements

    def create(self, address, netmask):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary_entry(address, netmask)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('secondary', ['address'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries(yang.adata.MNode):
    secondary: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary

    def __init__(self, secondary: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary_entry]=[]):
        self.secondary = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary(elements=secondary)
        self.secondary._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('secondaries')
        _secondary = self.secondary
        if _secondary is not None:
            res.children['secondary'] = _secondary.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries(secondary=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary.from_gdata(n.get_list("secondary")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries(secondary=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries__secondary.from_xml(yang.gdata.get_xml_children(n, "secondary")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__dhcp(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('dhcp')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__dhcp:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__dhcp()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__dhcp:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__dhcp()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses(yang.adata.MNode):
    address: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__address
    secondaries: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries
    unnumbered: ?str
    dhcp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__dhcp

    def __init__(self, address: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__address=None, secondaries: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries=None, unnumbered: ?str, dhcp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__dhcp=None):
        self.address = address
        self_address = self.address
        if self_address is not None:
            self_address._parent = self
        if secondaries is not None:
            self.secondaries = secondaries
        else:
            self.secondaries = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries()
        self_secondaries = self.secondaries
        if self_secondaries is not None:
            self_secondaries._parent = self
        self.unnumbered = unnumbered
        if dhcp is not None:
            self.dhcp = dhcp
        else:
            self.dhcp = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__dhcp()
        self_dhcp = self.dhcp
        if self_dhcp is not None:
            self_dhcp._parent = self

    def create_address(self, address, netmask):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__address(address, netmask)
        self.address = res
        return res

    def create_dhcp(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__dhcp()
        self.dhcp = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('addresses')
        _address = self.address
        _secondaries = self.secondaries
        _unnumbered = self.unnumbered
        _dhcp = self.dhcp
        if _address is not None:
            res.children['address'] = _address.to_gdata()
        if _secondaries is not None:
            res.children['secondaries'] = _secondaries.to_gdata()
        if _unnumbered is not None:
            res.children['unnumbered'] = yang.gdata.Leaf('unnumbered', _unnumbered)
        if _dhcp is not None:
            res.children['dhcp'] = _dhcp.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses(address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__address.from_gdata(n.get_container("address")), secondaries=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries.from_gdata(n.get_container("secondaries")), unnumbered=n.get_opt_str("unnumbered"), dhcp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__dhcp.from_gdata(n.get_container("dhcp")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses(address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__address.from_xml(yang.gdata.get_xml_child(n, "address")), secondaries=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__secondaries.from_xml(yang.gdata.get_xml_child(n, "secondaries")), unnumbered=yang.gdata.from_xml_opt_str(n, "unnumbered"), dhcp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses__dhcp.from_xml(yang.gdata.get_xml_child(n, "dhcp")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4(yang.adata.MNode):
    addresses: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses

    def __init__(self, addresses: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses=None):
        if addresses is not None:
            self.addresses = addresses
        else:
            self.addresses = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses()
        self_addresses = self.addresses
        if self_addresses is not None:
            self_addresses._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('ipv4')
        _addresses = self.addresses
        if _addresses is not None:
            res.children['addresses'] = _addresses.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4(addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses.from_gdata(n.get_container("addresses")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4(addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4__addresses.from_xml(yang.gdata.get_xml_child(n, "addresses")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address_entry(yang.adata.MNode):
    address: str
    prefix_length: int
    zone: str
    route_tag: ?int
    algorithm: ?int

    def __init__(self, address: str, prefix_length: int, zone: str, route_tag: ?int, algorithm: ?int):
        self.address = address
        self.prefix_length = prefix_length
        self.zone = zone
        self.route_tag = route_tag
        self.algorithm = algorithm

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.address)])
        _address = self.address
        _prefix_length = self.prefix_length
        _zone = self.zone
        _route_tag = self.route_tag
        _algorithm = self.algorithm
        if _address is not None:
            res.children['address'] = yang.gdata.Leaf('address', _address)
        if _prefix_length is not None:
            res.children['prefix-length'] = yang.gdata.Leaf('prefix-length', _prefix_length)
        if _zone is not None:
            res.children['zone'] = yang.gdata.Leaf('zone', _zone)
        if _route_tag is not None:
            res.children['route-tag'] = yang.gdata.Leaf('route-tag', _route_tag)
        if _algorithm is not None:
            res.children['algorithm'] = yang.gdata.Leaf('algorithm', _algorithm)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address_entry(address=n.get_str("address"), prefix_length=n.get_int("prefix-length"), zone=n.get_str("zone"), route_tag=n.get_opt_int("route-tag"), algorithm=n.get_opt_int("algorithm"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address_entry(address=yang.gdata.from_xml_str(n, "address"), prefix_length=yang.gdata.from_xml_int(n, "prefix-length"), zone=yang.gdata.from_xml_str(n, "zone"), route_tag=yang.gdata.from_xml_opt_int(n, "route-tag"), algorithm=yang.gdata.from_xml_opt_int(n, "algorithm"))

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address_entry]
    def __init__(self, elements=[]):
        self._name = 'ipv6-address'
        self.elements = elements

    def create(self, address, prefix_length, zone):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address_entry(address, prefix_length, zone)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('ipv6-address', ['address'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__link_local_address(yang.adata.MNode):
    address: str
    zone: str
    route_tag: ?int

    def __init__(self, address: str, zone: str, route_tag: ?int):
        self.address = address
        self.zone = zone
        self.route_tag = route_tag

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('link-local-address')
        _address = self.address
        _zone = self.zone
        _route_tag = self.route_tag
        if _address is not None:
            res.children['address'] = yang.gdata.Leaf('address', _address)
        if _zone is not None:
            res.children['zone'] = yang.gdata.Leaf('zone', _zone)
        if _route_tag is not None:
            res.children['route-tag'] = yang.gdata.Leaf('route-tag', _route_tag)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__link_local_address:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__link_local_address(address=n.get_str("address"), zone=n.get_str("zone"), route_tag=n.get_opt_int("route-tag"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__link_local_address:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__link_local_address(address=yang.gdata.from_xml_str(n, "address"), zone=yang.gdata.from_xml_str(n, "zone"), route_tag=yang.gdata.from_xml_opt_int(n, "route-tag"))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address_entry(yang.adata.MNode):
    address: str
    prefix_length: int
    zone: str
    route_tag: ?int
    algorithm: ?int

    def __init__(self, address: str, prefix_length: int, zone: str, route_tag: ?int, algorithm: ?int):
        self.address = address
        self.prefix_length = prefix_length
        self.zone = zone
        self.route_tag = route_tag
        self.algorithm = algorithm

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.address)])
        _address = self.address
        _prefix_length = self.prefix_length
        _zone = self.zone
        _route_tag = self.route_tag
        _algorithm = self.algorithm
        if _address is not None:
            res.children['address'] = yang.gdata.Leaf('address', _address)
        if _prefix_length is not None:
            res.children['prefix-length'] = yang.gdata.Leaf('prefix-length', _prefix_length)
        if _zone is not None:
            res.children['zone'] = yang.gdata.Leaf('zone', _zone)
        if _route_tag is not None:
            res.children['route-tag'] = yang.gdata.Leaf('route-tag', _route_tag)
        if _algorithm is not None:
            res.children['algorithm'] = yang.gdata.Leaf('algorithm', _algorithm)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address_entry(address=n.get_str("address"), prefix_length=n.get_int("prefix-length"), zone=n.get_str("zone"), route_tag=n.get_opt_int("route-tag"), algorithm=n.get_opt_int("algorithm"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address_entry(address=yang.gdata.from_xml_str(n, "address"), prefix_length=yang.gdata.from_xml_int(n, "prefix-length"), zone=yang.gdata.from_xml_str(n, "zone"), route_tag=yang.gdata.from_xml_opt_int(n, "route-tag"), algorithm=yang.gdata.from_xml_opt_int(n, "algorithm"))

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address_entry]
    def __init__(self, elements=[]):
        self._name = 'eui64-address'
        self.elements = elements

    def create(self, address, prefix_length, zone):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address_entry(address, prefix_length, zone)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('eui64-address', ['address'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses(yang.adata.MNode):
    eui64_address: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address

    def __init__(self, eui64_address: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address_entry]=[]):
        self.eui64_address = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address(elements=eui64_address)
        self.eui64_address._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('eui64-addresses')
        _eui64_address = self.eui64_address
        if _eui64_address is not None:
            res.children['eui64-address'] = _eui64_address.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses(eui64_address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address.from_gdata(n.get_list("eui64-address")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses(eui64_address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses__eui64_address.from_xml(yang.gdata.get_xml_children(n, "eui64-address")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__autoconfig(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('autoconfig')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__autoconfig:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__autoconfig()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__autoconfig:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__autoconfig()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('dhcp')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp_client_options(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('dhcp-client-options')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp_client_options:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp_client_options()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp_client_options:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp_client_options()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses(yang.adata.MNode):
    ipv6_address: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address
    link_local_address: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__link_local_address
    eui64_addresses: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses
    autoconfig: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__autoconfig
    dhcp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp
    dhcp_client_options: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp_client_options

    def __init__(self, ipv6_address: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address_entry]=[], link_local_address: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__link_local_address=None, eui64_addresses: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses=None, autoconfig: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__autoconfig=None, dhcp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp=None, dhcp_client_options: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp_client_options=None):
        self.ipv6_address = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address(elements=ipv6_address)
        self.ipv6_address._parent = self
        self.link_local_address = link_local_address
        self_link_local_address = self.link_local_address
        if self_link_local_address is not None:
            self_link_local_address._parent = self
        if eui64_addresses is not None:
            self.eui64_addresses = eui64_addresses
        else:
            self.eui64_addresses = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses()
        self_eui64_addresses = self.eui64_addresses
        if self_eui64_addresses is not None:
            self_eui64_addresses._parent = self
        if autoconfig is not None:
            self.autoconfig = autoconfig
        else:
            self.autoconfig = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__autoconfig()
        self_autoconfig = self.autoconfig
        if self_autoconfig is not None:
            self_autoconfig._parent = self
        if dhcp is not None:
            self.dhcp = dhcp
        else:
            self.dhcp = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp()
        self_dhcp = self.dhcp
        if self_dhcp is not None:
            self_dhcp._parent = self
        if dhcp_client_options is not None:
            self.dhcp_client_options = dhcp_client_options
        else:
            self.dhcp_client_options = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp_client_options()
        self_dhcp_client_options = self.dhcp_client_options
        if self_dhcp_client_options is not None:
            self_dhcp_client_options._parent = self

    def create_link_local_address(self, address, zone):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__link_local_address(address, zone)
        self.link_local_address = res
        return res

    def create_autoconfig(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__autoconfig()
        self.autoconfig = res
        return res

    def create_dhcp(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp()
        self.dhcp = res
        return res

    def create_dhcp_client_options(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp_client_options()
        self.dhcp_client_options = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('addresses')
        _ipv6_address = self.ipv6_address
        _link_local_address = self.link_local_address
        _eui64_addresses = self.eui64_addresses
        _autoconfig = self.autoconfig
        _dhcp = self.dhcp
        _dhcp_client_options = self.dhcp_client_options
        if _ipv6_address is not None:
            res.children['ipv6-address'] = _ipv6_address.to_gdata()
        if _link_local_address is not None:
            res.children['link-local-address'] = _link_local_address.to_gdata()
        if _eui64_addresses is not None:
            res.children['eui64-addresses'] = _eui64_addresses.to_gdata()
        if _autoconfig is not None:
            res.children['autoconfig'] = _autoconfig.to_gdata()
        if _dhcp is not None:
            res.children['dhcp'] = _dhcp.to_gdata()
        if _dhcp_client_options is not None:
            res.children['dhcp-client-options'] = _dhcp_client_options.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses(ipv6_address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address.from_gdata(n.get_list("ipv6-address")), link_local_address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__link_local_address.from_gdata(n.get_container("link-local-address")), eui64_addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses.from_gdata(n.get_container("eui64-addresses")), autoconfig=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__autoconfig.from_gdata(n.get_container("autoconfig")), dhcp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp.from_gdata(n.get_container("dhcp")), dhcp_client_options=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp_client_options.from_gdata(n.get_container("dhcp-client-options")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses(ipv6_address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__ipv6_address.from_xml(yang.gdata.get_xml_children(n, "ipv6-address")), link_local_address=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__link_local_address.from_xml(yang.gdata.get_xml_child(n, "link-local-address")), eui64_addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__eui64_addresses.from_xml(yang.gdata.get_xml_child(n, "eui64-addresses")), autoconfig=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__autoconfig.from_xml(yang.gdata.get_xml_child(n, "autoconfig")), dhcp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp.from_xml(yang.gdata.get_xml_child(n, "dhcp")), dhcp_client_options=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses__dhcp_client_options.from_xml(yang.gdata.get_xml_child(n, "dhcp-client-options")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__enable(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('enable')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__enable:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__enable()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__enable:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__enable()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6(yang.adata.MNode):
    addresses: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses
    enable: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__enable

    def __init__(self, addresses: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses=None, enable: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__enable=None):
        if addresses is not None:
            self.addresses = addresses
        else:
            self.addresses = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses()
        self_addresses = self.addresses
        if self_addresses is not None:
            self_addresses._parent = self
        if enable is not None:
            self.enable = enable
        else:
            self.enable = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__enable()
        self_enable = self.enable
        if self_enable is not None:
            self_enable._parent = self

    def create_enable(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__enable()
        self.enable = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('ipv6')
        _addresses = self.addresses
        _enable = self.enable
        if _addresses is not None:
            res.children['addresses'] = _addresses.to_gdata()
        if _enable is not None:
            res.children['enable'] = _enable.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6(addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses.from_gdata(n.get_container("addresses")), enable=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__enable.from_gdata(n.get_container("enable")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6(addresses=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__addresses.from_xml(yang.gdata.get_xml_child(n, "addresses")), enable=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6__enable.from_xml(yang.gdata.get_xml_child(n, "enable")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty(yang.adata.MNode):
    value: int

    def __init__(self, value: int):
        self.value = value

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('restart-penalty')
        _value = self.value
        if _value is not None:
            res.children['value'] = yang.gdata.Leaf('value', _value)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty(value=n.get_int("value"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty(value=yang.gdata.from_xml_int(n, "value"))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time(yang.adata.MNode):
    value: int
    restart_penalty: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty

    def __init__(self, value: int, restart_penalty: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty=None):
        self.value = value
        self.restart_penalty = restart_penalty
        self_restart_penalty = self.restart_penalty
        if self_restart_penalty is not None:
            self_restart_penalty._parent = self

    def create_restart_penalty(self, value):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty(value)
        self.restart_penalty = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('max-suppress-time')
        _value = self.value
        _restart_penalty = self.restart_penalty
        if _value is not None:
            res.children['value'] = yang.gdata.Leaf('value', _value)
        if _restart_penalty is not None:
            res.children['restart-penalty'] = _restart_penalty.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time(value=n.get_int("value"), restart_penalty=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty.from_gdata(n.get_container("restart-penalty")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time(value=yang.gdata.from_xml_int(n, "value"), restart_penalty=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time__restart_penalty.from_xml(yang.gdata.get_xml_child(n, "restart-penalty")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold(yang.adata.MNode):
    value: int
    max_suppress_time: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time

    def __init__(self, value: int, max_suppress_time: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time=None):
        self.value = value
        self.max_suppress_time = max_suppress_time
        self_max_suppress_time = self.max_suppress_time
        if self_max_suppress_time is not None:
            self_max_suppress_time._parent = self

    def create_max_suppress_time(self, value, restart_penalty):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time(value, restart_penalty)
        self.max_suppress_time = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('suppress-threshold')
        _value = self.value
        _max_suppress_time = self.max_suppress_time
        if _value is not None:
            res.children['value'] = yang.gdata.Leaf('value', _value)
        if _max_suppress_time is not None:
            res.children['max-suppress-time'] = _max_suppress_time.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold(value=n.get_int("value"), max_suppress_time=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time.from_gdata(n.get_container("max-suppress-time")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold(value=yang.gdata.from_xml_int(n, "value"), max_suppress_time=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold__max_suppress_time.from_xml(yang.gdata.get_xml_child(n, "max-suppress-time")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold(yang.adata.MNode):
    value: int
    suppress_threshold: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold

    def __init__(self, value: int, suppress_threshold: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold=None):
        self.value = value
        self.suppress_threshold = suppress_threshold
        self_suppress_threshold = self.suppress_threshold
        if self_suppress_threshold is not None:
            self_suppress_threshold._parent = self

    def create_suppress_threshold(self, value, max_suppress_time):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold(value, max_suppress_time)
        self.suppress_threshold = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('reuse-threshold')
        _value = self.value
        _suppress_threshold = self.suppress_threshold
        if _value is not None:
            res.children['value'] = yang.gdata.Leaf('value', _value)
        if _suppress_threshold is not None:
            res.children['suppress-threshold'] = _suppress_threshold.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold(value=n.get_int("value"), suppress_threshold=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold.from_gdata(n.get_container("suppress-threshold")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold(value=yang.gdata.from_xml_int(n, "value"), suppress_threshold=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold__suppress_threshold.from_xml(yang.gdata.get_xml_child(n, "suppress-threshold")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life(yang.adata.MNode):
    value: int
    reuse_threshold: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold

    def __init__(self, value: int, reuse_threshold: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold=None):
        self.value = value
        self.reuse_threshold = reuse_threshold
        self_reuse_threshold = self.reuse_threshold
        if self_reuse_threshold is not None:
            self_reuse_threshold._parent = self

    def create_reuse_threshold(self, value, suppress_threshold):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold(value, suppress_threshold)
        self.reuse_threshold = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('decay-half-life')
        _value = self.value
        _reuse_threshold = self.reuse_threshold
        if _value is not None:
            res.children['value'] = yang.gdata.Leaf('value', _value)
        if _reuse_threshold is not None:
            res.children['reuse-threshold'] = _reuse_threshold.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life(value=n.get_int("value"), reuse_threshold=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold.from_gdata(n.get_container("reuse-threshold")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life(value=yang.gdata.from_xml_int(n, "value"), reuse_threshold=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life__reuse_threshold.from_xml(yang.gdata.get_xml_child(n, "reuse-threshold")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening(yang.adata.MNode):
    decay_half_life: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life

    def __init__(self, decay_half_life: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life=None):
        self.decay_half_life = decay_half_life
        self_decay_half_life = self.decay_half_life
        if self_decay_half_life is not None:
            self_decay_half_life._parent = self

    def create_decay_half_life(self, value, reuse_threshold):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life(value, reuse_threshold)
        self.decay_half_life = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('dampening')
        _decay_half_life = self.decay_half_life
        if _decay_half_life is not None:
            res.children['decay-half-life'] = _decay_half_life.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening(decay_half_life=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life.from_gdata(n.get_container("decay-half-life")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening(decay_half_life=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening__decay_half_life.from_xml(yang.gdata.get_xml_child(n, "decay-half-life")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__ppp(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('ppp')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__ppp:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__ppp()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__ppp:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__ppp()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__hdlc(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('hdlc')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__hdlc:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__hdlc()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__hdlc:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__hdlc()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__mfr(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('mfr')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__mfr:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__mfr()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__mfr:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__mfr()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay__IETF(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('IETF')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay__IETF:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay__IETF()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay__IETF:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay__IETF()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay(yang.adata.MNode):
    IETF: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay__IETF

    def __init__(self, IETF: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay__IETF=None):
        if IETF is not None:
            self.IETF = IETF
        else:
            self.IETF = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay__IETF()
        self_IETF = self.IETF
        if self_IETF is not None:
            self_IETF._parent = self

    def create_IETF(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay__IETF()
        self.IETF = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('frame-relay')
        _IETF = self.IETF
        if _IETF is not None:
            res.children['IETF'] = _IETF.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay(IETF=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay__IETF.from_gdata(n.get_container("IETF")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay(IETF=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay__IETF.from_xml(yang.gdata.get_xml_child(n, "IETF")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation(yang.adata.MNode):
    ppp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__ppp
    hdlc: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__hdlc
    mfr: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__mfr
    frame_relay: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay

    def __init__(self, ppp: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__ppp=None, hdlc: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__hdlc=None, mfr: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__mfr=None, frame_relay: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay=None):
        if ppp is not None:
            self.ppp = ppp
        else:
            self.ppp = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__ppp()
        self_ppp = self.ppp
        if self_ppp is not None:
            self_ppp._parent = self
        if hdlc is not None:
            self.hdlc = hdlc
        else:
            self.hdlc = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__hdlc()
        self_hdlc = self.hdlc
        if self_hdlc is not None:
            self_hdlc._parent = self
        if mfr is not None:
            self.mfr = mfr
        else:
            self.mfr = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__mfr()
        self_mfr = self.mfr
        if self_mfr is not None:
            self_mfr._parent = self
        if frame_relay is not None:
            self.frame_relay = frame_relay
        else:
            self.frame_relay = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay()
        self_frame_relay = self.frame_relay
        if self_frame_relay is not None:
            self_frame_relay._parent = self

    def create_ppp(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__ppp()
        self.ppp = res
        return res

    def create_hdlc(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__hdlc()
        self.hdlc = res
        return res

    def create_mfr(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__mfr()
        self.mfr = res
        return res

    def create_frame_relay(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay()
        self.frame_relay = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('encapsulation')
        _ppp = self.ppp
        _hdlc = self.hdlc
        _mfr = self.mfr
        _frame_relay = self.frame_relay
        if _ppp is not None:
            res.children['ppp'] = _ppp.to_gdata()
        if _hdlc is not None:
            res.children['hdlc'] = _hdlc.to_gdata()
        if _mfr is not None:
            res.children['mfr'] = _mfr.to_gdata()
        if _frame_relay is not None:
            res.children['frame-relay'] = _frame_relay.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation(ppp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__ppp.from_gdata(n.get_container("ppp")), hdlc=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__hdlc.from_gdata(n.get_container("hdlc")), mfr=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__mfr.from_gdata(n.get_container("mfr")), frame_relay=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay.from_gdata(n.get_container("frame-relay")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation(ppp=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__ppp.from_xml(yang.gdata.get_xml_child(n, "ppp")), hdlc=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__hdlc.from_xml(yang.gdata.get_xml_child(n, "hdlc")), mfr=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__mfr.from_xml(yang.gdata.get_xml_child(n, "mfr")), frame_relay=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation__frame_relay.from_xml(yang.gdata.get_xml_child(n, "frame-relay")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__shutdown(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('shutdown')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__shutdown:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__shutdown()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__shutdown:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__shutdown()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events__link_status(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('link-status')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events__link_status:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events__link_status()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events__link_status:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events__link_status()


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events(yang.adata.MNode):
    link_status: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events__link_status

    def __init__(self, link_status: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events__link_status=None):
        if link_status is not None:
            self.link_status = link_status
        else:
            self.link_status = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events__link_status()
        self_link_status = self.link_status
        if self_link_status is not None:
            self_link_status._parent = self

    def create_link_status(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events__link_status()
        self.link_status = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('events')
        _link_status = self.link_status
        if _link_status is not None:
            res.children['link-status'] = _link_status.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events(link_status=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events__link_status.from_gdata(n.get_container("link-status")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events(link_status=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events__link_status.from_xml(yang.gdata.get_xml_child(n, "link-status")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging(yang.adata.MNode):
    events: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events

    def __init__(self, events: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events=None):
        if events is not None:
            self.events = events
        else:
            self.events = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events()
        self_events = self.events
        if self_events is not None:
            self_events._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('logging')
        _events = self.events
        if _events is not None:
            res.children['events'] = _events.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging(events=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events.from_gdata(n.get_container("events")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging(events=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging__events.from_xml(yang.gdata.get_xml_child(n, "events")))


class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure_entry(yang.adata.MNode):
    interface_name: str
    sub_interface_type: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type
    ipv4: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4
    ipv6: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6
    dampening: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening
    encapsulation: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation
    shutdown: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__shutdown
    mtu: ?int
    logging: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging
    bandwidth: ?int
    description: ?str

    def __init__(self, interface_name: str, sub_interface_type: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type=None, ipv4: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4=None, ipv6: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6=None, dampening: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening=None, encapsulation: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation=None, shutdown: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__shutdown=None, mtu: ?int, logging: ?Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging=None, bandwidth: ?int, description: ?str):
        self.interface_name = interface_name
        if sub_interface_type is not None:
            self.sub_interface_type = sub_interface_type
        else:
            self.sub_interface_type = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type()
        self_sub_interface_type = self.sub_interface_type
        if self_sub_interface_type is not None:
            self_sub_interface_type._parent = self
        if ipv4 is not None:
            self.ipv4 = ipv4
        else:
            self.ipv4 = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4()
        self_ipv4 = self.ipv4
        if self_ipv4 is not None:
            self_ipv4._parent = self
        if ipv6 is not None:
            self.ipv6 = ipv6
        else:
            self.ipv6 = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6()
        self_ipv6 = self.ipv6
        if self_ipv6 is not None:
            self_ipv6._parent = self
        if dampening is not None:
            self.dampening = dampening
        else:
            self.dampening = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening()
        self_dampening = self.dampening
        if self_dampening is not None:
            self_dampening._parent = self
        if encapsulation is not None:
            self.encapsulation = encapsulation
        else:
            self.encapsulation = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation()
        self_encapsulation = self.encapsulation
        if self_encapsulation is not None:
            self_encapsulation._parent = self
        if shutdown is not None:
            self.shutdown = shutdown
        else:
            self.shutdown = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__shutdown()
        self_shutdown = self.shutdown
        if self_shutdown is not None:
            self_shutdown._parent = self
        self.mtu = mtu
        if logging is not None:
            self.logging = logging
        else:
            self.logging = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging()
        self_logging = self.logging
        if self_logging is not None:
            self_logging._parent = self
        self.bandwidth = bandwidth
        self.description = description

    def create_dampening(self, decay_half_life):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening(decay_half_life)
        self.dampening = res
        return res

    def create_shutdown(self):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__shutdown()
        self.shutdown = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.interface_name)])
        _interface_name = self.interface_name
        _sub_interface_type = self.sub_interface_type
        _ipv4 = self.ipv4
        _ipv6 = self.ipv6
        _dampening = self.dampening
        _encapsulation = self.encapsulation
        _shutdown = self.shutdown
        _mtu = self.mtu
        _logging = self.logging
        _bandwidth = self.bandwidth
        _description = self.description
        if _interface_name is not None:
            res.children['interface-name'] = yang.gdata.Leaf('interface-name', _interface_name)
        if _sub_interface_type is not None:
            res.children['sub-interface-type'] = _sub_interface_type.to_gdata()
        if _ipv4 is not None:
            res.children['ipv4'] = _ipv4.to_gdata()
        if _ipv6 is not None:
            res.children['ipv6'] = _ipv6.to_gdata()
        if _dampening is not None:
            res.children['dampening'] = _dampening.to_gdata()
        if _encapsulation is not None:
            res.children['encapsulation'] = _encapsulation.to_gdata()
        if _shutdown is not None:
            res.children['shutdown'] = _shutdown.to_gdata()
        if _mtu is not None:
            res.children['mtu'] = yang.gdata.Leaf('mtu', _mtu)
        if _logging is not None:
            res.children['logging'] = _logging.to_gdata()
        if _bandwidth is not None:
            res.children['bandwidth'] = yang.gdata.Leaf('bandwidth', _bandwidth)
        if _description is not None:
            res.children['description'] = yang.gdata.Leaf('description', _description)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure_entry(interface_name=n.get_str("interface-name"), sub_interface_type=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type.from_gdata(n.get_container("sub-interface-type")), ipv4=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4.from_gdata(n.get_container("ipv4")), ipv6=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6.from_gdata(n.get_container("ipv6")), dampening=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening.from_gdata(n.get_container("dampening")), encapsulation=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation.from_gdata(n.get_container("encapsulation")), shutdown=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__shutdown.from_gdata(n.get_container("shutdown")), mtu=n.get_opt_int("mtu"), logging=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging.from_gdata(n.get_container("logging")), bandwidth=n.get_opt_int("bandwidth"), description=n.get_opt_str("description"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure_entry:
        return Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure_entry(interface_name=yang.gdata.from_xml_str(n, "interface-name"), sub_interface_type=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__sub_interface_type.from_xml(yang.gdata.get_xml_child(n, "sub-interface-type")), ipv4=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv4.from_xml(yang.gdata.get_xml_child(n, "ipv4")), ipv6=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__ipv6.from_xml(yang.gdata.get_xml_child(n, "ipv6")), dampening=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__dampening.from_xml(yang.gdata.get_xml_child(n, "dampening")), encapsulation=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__encapsulation.from_xml(yang.gdata.get_xml_child(n, "encapsulation")), shutdown=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__shutdown.from_xml(yang.gdata.get_xml_child(n, "shutdown")), mtu=yang.gdata.from_xml_opt_int(n, "mtu"), logging=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure__logging.from_xml(yang.gdata.get_xml_child(n, "logging")), bandwidth=yang.gdata.from_xml_opt_int(n, "bandwidth"), description=yang.gdata.from_xml_opt_str(n, "description"))

class Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure_entry]
    def __init__(self, elements=[]):
        self._name = 'interface-preconfigure'
        self.elements = elements

    def create(self, interface_name):
        res = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure_entry(interface_name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('interface-preconfigure', ['interface-name'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_interface_cfg__interfaces(yang.adata.MNode):
    interface: Cisco_IOS_XR_um_interface_cfg__interfaces__interface
    interface_preconfigure: Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure

    def __init__(self, interface: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_entry]=[], interface_preconfigure: list[Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure_entry]=[]):
        self.interface = Cisco_IOS_XR_um_interface_cfg__interfaces__interface(elements=interface)
        self.interface._parent = self
        self.interface_preconfigure = Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure(elements=interface_preconfigure)
        self.interface_preconfigure._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('interfaces')
        _interface = self.interface
        _interface_preconfigure = self.interface_preconfigure
        if _interface is not None:
            res.children['interface'] = _interface.to_gdata()
        if _interface_preconfigure is not None:
            res.children['interface-preconfigure'] = _interface_preconfigure.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces:
        return Cisco_IOS_XR_um_interface_cfg__interfaces(interface=Cisco_IOS_XR_um_interface_cfg__interfaces__interface.from_gdata(n.get_list("interface")), interface_preconfigure=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure.from_gdata(n.get_list("interface-preconfigure")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__interfaces:
        return Cisco_IOS_XR_um_interface_cfg__interfaces(interface=Cisco_IOS_XR_um_interface_cfg__interfaces__interface.from_xml(yang.gdata.get_xml_children(n, "interface")), interface_preconfigure=Cisco_IOS_XR_um_interface_cfg__interfaces__interface_preconfigure.from_xml(yang.gdata.get_xml_children(n, "interface-preconfigure")))


class Cisco_IOS_XR_um_interface_cfg__controllers__controller__shutdown(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('shutdown')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__controllers__controller__shutdown:
        return Cisco_IOS_XR_um_interface_cfg__controllers__controller__shutdown()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__controllers__controller__shutdown:
        return Cisco_IOS_XR_um_interface_cfg__controllers__controller__shutdown()


class Cisco_IOS_XR_um_interface_cfg__controllers__controller_entry(yang.adata.MNode):
    controller_name: str
    shutdown: ?Cisco_IOS_XR_um_interface_cfg__controllers__controller__shutdown
    description: ?str
    sec_admin_state: ?str

    def __init__(self, controller_name: str, shutdown: ?Cisco_IOS_XR_um_interface_cfg__controllers__controller__shutdown=None, description: ?str, sec_admin_state: ?str):
        self.controller_name = controller_name
        if shutdown is not None:
            self.shutdown = shutdown
        else:
            self.shutdown = Cisco_IOS_XR_um_interface_cfg__controllers__controller__shutdown()
        self_shutdown = self.shutdown
        if self_shutdown is not None:
            self_shutdown._parent = self
        self.description = description
        self.sec_admin_state = sec_admin_state

    def create_shutdown(self):
        res = Cisco_IOS_XR_um_interface_cfg__controllers__controller__shutdown()
        self.shutdown = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.controller_name)])
        _controller_name = self.controller_name
        _shutdown = self.shutdown
        _description = self.description
        _sec_admin_state = self.sec_admin_state
        if _controller_name is not None:
            res.children['controller-name'] = yang.gdata.Leaf('controller-name', _controller_name)
        if _shutdown is not None:
            res.children['shutdown'] = _shutdown.to_gdata()
        if _description is not None:
            res.children['description'] = yang.gdata.Leaf('description', _description)
        if _sec_admin_state is not None:
            res.children['sec-admin-state'] = yang.gdata.Leaf('sec-admin-state', _sec_admin_state)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__controllers__controller_entry:
        return Cisco_IOS_XR_um_interface_cfg__controllers__controller_entry(controller_name=n.get_str("controller-name"), shutdown=Cisco_IOS_XR_um_interface_cfg__controllers__controller__shutdown.from_gdata(n.get_container("shutdown")), description=n.get_opt_str("description"), sec_admin_state=n.get_opt_str("sec-admin-state"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__controllers__controller_entry:
        return Cisco_IOS_XR_um_interface_cfg__controllers__controller_entry(controller_name=yang.gdata.from_xml_str(n, "controller-name"), shutdown=Cisco_IOS_XR_um_interface_cfg__controllers__controller__shutdown.from_xml(yang.gdata.get_xml_child(n, "shutdown")), description=yang.gdata.from_xml_opt_str(n, "description"), sec_admin_state=yang.gdata.from_xml_opt_str(n, "sec-admin-state"))

class Cisco_IOS_XR_um_interface_cfg__controllers__controller(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__controllers__controller_entry]
    def __init__(self, elements=[]):
        self._name = 'controller'
        self.elements = elements

    def create(self, controller_name):
        res = Cisco_IOS_XR_um_interface_cfg__controllers__controller_entry(controller_name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('controller', ['controller-name'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__controllers__controller_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_interface_cfg__controllers__controller_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__controllers__controller_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__controllers__controller_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure__shutdown(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('shutdown')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure__shutdown:
        return Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure__shutdown()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure__shutdown:
        return Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure__shutdown()


class Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure_entry(yang.adata.MNode):
    controller_name: str
    shutdown: ?Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure__shutdown
    description: ?str
    sec_admin_state: ?str

    def __init__(self, controller_name: str, shutdown: ?Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure__shutdown=None, description: ?str, sec_admin_state: ?str):
        self.controller_name = controller_name
        if shutdown is not None:
            self.shutdown = shutdown
        else:
            self.shutdown = Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure__shutdown()
        self_shutdown = self.shutdown
        if self_shutdown is not None:
            self_shutdown._parent = self
        self.description = description
        self.sec_admin_state = sec_admin_state

    def create_shutdown(self):
        res = Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure__shutdown()
        self.shutdown = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.ListElement([str(self.controller_name)])
        _controller_name = self.controller_name
        _shutdown = self.shutdown
        _description = self.description
        _sec_admin_state = self.sec_admin_state
        if _controller_name is not None:
            res.children['controller-name'] = yang.gdata.Leaf('controller-name', _controller_name)
        if _shutdown is not None:
            res.children['shutdown'] = _shutdown.to_gdata()
        if _description is not None:
            res.children['description'] = yang.gdata.Leaf('description', _description)
        if _sec_admin_state is not None:
            res.children['sec-admin-state'] = yang.gdata.Leaf('sec-admin-state', _sec_admin_state)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure_entry:
        return Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure_entry(controller_name=n.get_str("controller-name"), shutdown=Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure__shutdown.from_gdata(n.get_container("shutdown")), description=n.get_opt_str("description"), sec_admin_state=n.get_opt_str("sec-admin-state"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure_entry:
        return Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure_entry(controller_name=yang.gdata.from_xml_str(n, "controller-name"), shutdown=Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure__shutdown.from_xml(yang.gdata.get_xml_child(n, "shutdown")), description=yang.gdata.from_xml_opt_str(n, "description"), sec_admin_state=yang.gdata.from_xml_opt_str(n, "sec-admin-state"))

class Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure(yang.adata.MNode):
    elements: list[Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure_entry]
    def __init__(self, elements=[]):
        self._name = 'controller-preconfigure'
        self.elements = elements

    def create(self, controller_name):
        res = Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure_entry(controller_name)
        self.elements.append(res)
        return res

    def to_gdata(self):
        res = yang.gdata.List('controller-preconfigure', ['controller-name'])
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.ListElement):
                res.elements.append(e_gdata)
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.List) -> list[Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure_entry]:
        res = []
        for e in n.elements:
            res.append(Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure_entry.from_gdata(e))
        return res

    @staticmethod
    def from_xml(nodes: list[xml.Node]) -> list[Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure_entry]:
        res = []
        for node in nodes:
            res.append(Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure_entry.from_xml(node))
        return res


class Cisco_IOS_XR_um_interface_cfg__controllers(yang.adata.MNode):
    controller: Cisco_IOS_XR_um_interface_cfg__controllers__controller
    controller_preconfigure: Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure

    def __init__(self, controller: list[Cisco_IOS_XR_um_interface_cfg__controllers__controller_entry]=[], controller_preconfigure: list[Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure_entry]=[]):
        self.controller = Cisco_IOS_XR_um_interface_cfg__controllers__controller(elements=controller)
        self.controller._parent = self
        self.controller_preconfigure = Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure(elements=controller_preconfigure)
        self.controller_preconfigure._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('controllers')
        _controller = self.controller
        _controller_preconfigure = self.controller_preconfigure
        if _controller is not None:
            res.children['controller'] = _controller.to_gdata()
        if _controller_preconfigure is not None:
            res.children['controller-preconfigure'] = _controller_preconfigure.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__controllers:
        return Cisco_IOS_XR_um_interface_cfg__controllers(controller=Cisco_IOS_XR_um_interface_cfg__controllers__controller.from_gdata(n.get_list("controller")), controller_preconfigure=Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure.from_gdata(n.get_list("controller-preconfigure")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__controllers:
        return Cisco_IOS_XR_um_interface_cfg__controllers(controller=Cisco_IOS_XR_um_interface_cfg__controllers__controller.from_xml(yang.gdata.get_xml_children(n, "controller")), controller_preconfigure=Cisco_IOS_XR_um_interface_cfg__controllers__controller_preconfigure.from_xml(yang.gdata.get_xml_children(n, "controller-preconfigure")))


class Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__disable(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('disable')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__disable:
        return Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__disable()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__disable:
        return Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__disable()


class Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__software_interfaces(yang.adata.MNode):

    def __init__(self):
        pass

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('software-interfaces')
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__software_interfaces:
        return Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__software_interfaces()

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__software_interfaces:
        return Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__software_interfaces()


class Cisco_IOS_XR_um_interface_cfg__logging__events__link_status(yang.adata.MNode):
    disable: ?Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__disable
    software_interfaces: ?Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__software_interfaces

    def __init__(self, disable: ?Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__disable=None, software_interfaces: ?Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__software_interfaces=None):
        if disable is not None:
            self.disable = disable
        else:
            self.disable = Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__disable()
        self_disable = self.disable
        if self_disable is not None:
            self_disable._parent = self
        if software_interfaces is not None:
            self.software_interfaces = software_interfaces
        else:
            self.software_interfaces = Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__software_interfaces()
        self_software_interfaces = self.software_interfaces
        if self_software_interfaces is not None:
            self_software_interfaces._parent = self

    def create_disable(self):
        res = Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__disable()
        self.disable = res
        return res

    def create_software_interfaces(self):
        res = Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__software_interfaces()
        self.software_interfaces = res
        return res

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('link-status')
        _disable = self.disable
        _software_interfaces = self.software_interfaces
        if _disable is not None:
            res.children['disable'] = _disable.to_gdata()
        if _software_interfaces is not None:
            res.children['software-interfaces'] = _software_interfaces.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__logging__events__link_status:
        return Cisco_IOS_XR_um_interface_cfg__logging__events__link_status(disable=Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__disable.from_gdata(n.get_container("disable")), software_interfaces=Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__software_interfaces.from_gdata(n.get_container("software-interfaces")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__logging__events__link_status:
        return Cisco_IOS_XR_um_interface_cfg__logging__events__link_status(disable=Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__disable.from_xml(yang.gdata.get_xml_child(n, "disable")), software_interfaces=Cisco_IOS_XR_um_interface_cfg__logging__events__link_status__software_interfaces.from_xml(yang.gdata.get_xml_child(n, "software-interfaces")))


class Cisco_IOS_XR_um_interface_cfg__logging__events(yang.adata.MNode):
    link_status: Cisco_IOS_XR_um_interface_cfg__logging__events__link_status

    def __init__(self, link_status: ?Cisco_IOS_XR_um_interface_cfg__logging__events__link_status=None):
        if link_status is not None:
            self.link_status = link_status
        else:
            self.link_status = Cisco_IOS_XR_um_interface_cfg__logging__events__link_status()
        self_link_status = self.link_status
        if self_link_status is not None:
            self_link_status._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('events')
        _link_status = self.link_status
        if _link_status is not None:
            res.children['link-status'] = _link_status.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__logging__events:
        return Cisco_IOS_XR_um_interface_cfg__logging__events(link_status=Cisco_IOS_XR_um_interface_cfg__logging__events__link_status.from_gdata(n.get_container("link-status")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__logging__events:
        return Cisco_IOS_XR_um_interface_cfg__logging__events(link_status=Cisco_IOS_XR_um_interface_cfg__logging__events__link_status.from_xml(yang.gdata.get_xml_child(n, "link-status")))


class Cisco_IOS_XR_um_interface_cfg__logging(yang.adata.MNode):
    events: Cisco_IOS_XR_um_interface_cfg__logging__events

    def __init__(self, events: ?Cisco_IOS_XR_um_interface_cfg__logging__events=None):
        if events is not None:
            self.events = events
        else:
            self.events = Cisco_IOS_XR_um_interface_cfg__logging__events()
        self_events = self.events
        if self_events is not None:
            self_events._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('logging')
        _events = self.events
        if _events is not None:
            res.children['events'] = _events.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_interface_cfg__logging:
        return Cisco_IOS_XR_um_interface_cfg__logging(events=Cisco_IOS_XR_um_interface_cfg__logging__events.from_gdata(n.get_container("events")))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_interface_cfg__logging:
        return Cisco_IOS_XR_um_interface_cfg__logging(events=Cisco_IOS_XR_um_interface_cfg__logging__events.from_xml(yang.gdata.get_xml_child(n, "events")))


class Cisco_IOS_XR_um_hostname_cfg__hostname(yang.adata.MNode):
    system_network_name: ?str

    def __init__(self, system_network_name: ?str):
        self.system_network_name = system_network_name

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Container('hostname')
        _system_network_name = self.system_network_name
        if _system_network_name is not None:
            res.children['system-network-name'] = yang.gdata.Leaf('system-network-name', _system_network_name)
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> Cisco_IOS_XR_um_hostname_cfg__hostname:
        return Cisco_IOS_XR_um_hostname_cfg__hostname(system_network_name=n.get_opt_str("system-network-name"))

    @staticmethod
    def from_xml(n: xml.Node) -> Cisco_IOS_XR_um_hostname_cfg__hostname:
        return Cisco_IOS_XR_um_hostname_cfg__hostname(system_network_name=yang.gdata.from_xml_opt_str(n, "system-network-name"))


class root(yang.adata.MNode):
    interfaces: Cisco_IOS_XR_um_interface_cfg__interfaces
    controllers: Cisco_IOS_XR_um_interface_cfg__controllers
    logging: Cisco_IOS_XR_um_interface_cfg__logging
    hostname: Cisco_IOS_XR_um_hostname_cfg__hostname

    def __init__(self, interfaces: ?Cisco_IOS_XR_um_interface_cfg__interfaces=None, controllers: ?Cisco_IOS_XR_um_interface_cfg__controllers=None, logging: ?Cisco_IOS_XR_um_interface_cfg__logging=None, hostname: ?Cisco_IOS_XR_um_hostname_cfg__hostname=None):
        if interfaces is not None:
            self.interfaces = interfaces
        else:
            self.interfaces = Cisco_IOS_XR_um_interface_cfg__interfaces()
        self_interfaces = self.interfaces
        if self_interfaces is not None:
            self_interfaces._parent = self
        if controllers is not None:
            self.controllers = controllers
        else:
            self.controllers = Cisco_IOS_XR_um_interface_cfg__controllers()
        self_controllers = self.controllers
        if self_controllers is not None:
            self_controllers._parent = self
        if logging is not None:
            self.logging = logging
        else:
            self.logging = Cisco_IOS_XR_um_interface_cfg__logging()
        self_logging = self.logging
        if self_logging is not None:
            self_logging._parent = self
        if hostname is not None:
            self.hostname = hostname
        else:
            self.hostname = Cisco_IOS_XR_um_hostname_cfg__hostname()
        self_hostname = self.hostname
        if self_hostname is not None:
            self_hostname._parent = self

    def to_gdata(self) -> yang.gdata.Node:
        res = yang.gdata.Root()
        _interfaces = self.interfaces
        _controllers = self.controllers
        _logging = self.logging
        _hostname = self.hostname
        if _interfaces is not None:
            res.children['interfaces'] = _interfaces.to_gdata()
        if _controllers is not None:
            res.children['controllers'] = _controllers.to_gdata()
        if _logging is not None:
            res.children['logging'] = _logging.to_gdata()
        if _hostname is not None:
            res.children['hostname'] = _hostname.to_gdata()
        for child in res.children.values():
            child.parent = res
        return res

    @staticmethod
    def from_gdata(n: yang.gdata.Node) -> root:
        return root(interfaces=Cisco_IOS_XR_um_interface_cfg__interfaces.from_gdata(n.get_container("interfaces")), controllers=Cisco_IOS_XR_um_interface_cfg__controllers.from_gdata(n.get_container("controllers")), logging=Cisco_IOS_XR_um_interface_cfg__logging.from_gdata(n.get_container("logging")), hostname=Cisco_IOS_XR_um_hostname_cfg__hostname.from_gdata(n.get_container("hostname")))

    @staticmethod
    def from_xml(n: xml.Node) -> root:
        return root(interfaces=Cisco_IOS_XR_um_interface_cfg__interfaces.from_xml(yang.gdata.get_xml_child(n, "interfaces")), controllers=Cisco_IOS_XR_um_interface_cfg__controllers.from_xml(yang.gdata.get_xml_child(n, "controllers")), logging=Cisco_IOS_XR_um_interface_cfg__logging.from_xml(yang.gdata.get_xml_child(n, "logging")), hostname=Cisco_IOS_XR_um_hostname_cfg__hostname.from_xml(yang.gdata.get_xml_child(n, "hostname")))

