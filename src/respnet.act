
import file
import xml
import yang.adata
import yang.gdata

import orchestron.device as odev
import orchestron.ttt as ttt

import respnet.layers
from respnet.layers.y_0 import root as cfs_root

import testing

def merge_confpsrc(confpsrc: dict[str, yang.gdata.Node]):
    chunks = list(confpsrc.values())
    if len(chunks) > 0:
        merged = chunks[0]
        if len(chunks) > 1:
            for chunk in chunks[1:]:
                merged = yang.gdata.merge(merged, chunk)
        return merged
    return yang.gdata.Root()


actor main(env):
    rfcap = file.ReadFileCap(file.FileCap(env.cap))
    if len(env.argv) <= 1:
        print("Usage: %s <filename>" % env.argv[0])
        await async env.exit(1)
    filename = env.argv[1]
    f = file.ReadFile(rfcap, filename)
    nb_input = await async f.read()
    f.close()

    dev_mgr = odev.DeviceManager()
    layers = respnet.layers.get_layers(dev_mgr)

    # Bootstrap first layer config input
    input_config = cfs_root.from_xml(xml.decode(nb_input.decode()))
    config_in = {"source1": input_config.to_gdata()}

    config_out = {}
    for idx, layer in enumerate(layers):
        print("Computing layer %d" % idx)
        config_out = {}
        layer.configure(config_in, config_out)
        print("=== Layer %d config === START ===" % idx)
        mc = merge_confpsrc(config_out)
        print(mc.to_xmlstr())
        print("=== Layer %d config === END =====" % idx)
        config_in = config_out

    env.exit(0)
