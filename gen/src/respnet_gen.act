import file

import orchestron.build
import orchestron.yang as oyang

# Generate the automatically generated code for RESPNET
#

netinfra_yang = """module netinfra {
  yang-version "1.1";
  namespace "http://example.com/netinfra";
  prefix "netinfra";
  description "Network Infrastructure";
  revision 2019-01-01 {
    description "test revision";
    reference "ref1";
  }

  container netinfra {
    description "Network infrastructure";
    list routers {
      key name;

      orchestron:transform respnet.cfs.Router;

      leaf name {
        type string;
      }
      leaf id {
        type string;
        description "router id";
      }
      leaf role {
        type string;
      }
    }
    list backbone-link {
      key "left-router left-interface right-router right-interface";

      orchestron:transform respnet.cfs.BBLink;

      leaf left-router {
        type string;
      }
      leaf left-interface {
        type string;
      }
      leaf right-router {
        type string;
      }
      leaf right-interface {
        type string;
      }
    }
  }
}
"""

l3vpn_yang = """module l3vpn {
  yang-version "1.1";
  namespace "http://example.com/l3vpn";
  prefix "l3vpn";
  description "L3VPN service";
  revision 2019-01-01 {
    description "funky revision";
    reference "ref1";
  }

  container l3vpn {
    description "L3VPN";
    leaf this {
      type string;
    }
    leaf that {
      type string;
    }
  }
}
"""

nodes_yang = """module nodes {
  yang-version "1.1";
  namespace "http://example.com/nodes";
  prefix "nodes";
  description "Nodes services";
  revision 2019-01-01 {
    description "funky revision";
    reference "ref1";
  }

  container nodes {
    list routers {
      key name;
      leaf name {
        type string;
      }

      orchestron:transform respnet.rfs.Router;

      leaf id {
        type string;
      }

      leaf ipv4-address {
        type string;
      }

      leaf ipv6-address {
        type string;
      }
      leaf corefoo {
        type string;
      }
      list backbone-interface {
        key name;
        leaf name {
          type string;
        }
        container remote {
          leaf device {
            type string;
            mandatory true;
          }
          leaf interface {
            type string;
            mandatory true;
          }
        }
      }
    }
  }
}
"""

respnet_rfs_yang = """module respnet-rfs {
    yang-version "1.1";
    namespace "http://example.com/respnet-rfs";
    prefix "respnet-rfs";

    import orchestron-rfs {
        prefix orfs;
    }

    augment "/orfs:rfs" {
        list backbone-interface {
            key name;

            orchestron:transform respnet.rfs.BBInterface;

            leaf name {
                type string;
            }

            leaf ipv4-address {
                type string;
            }

            leaf ipv4-prefix-length {
                type uint8 {
                    range "0..32";
                }
            }

            leaf ipv6-address {
                type string;
            }

            leaf ipv6-prefix-length {
                type uint8 {
                    range "0..128";
                }
            }

            container remote {
                leaf device {
                    type string;
                    mandatory true;
                }
                leaf interface {
                    type string;
                    mandatory true;
                }
            }
        }
    }
}
"""


dev_junos_yang = """module junos {
    yang-version "1.1";
    namespace "http://example.com/junos";
    prefix "junos";
    description "JUNOS device";

    container interfaces {
        list interface {
            key name;
            leaf name {
                type string;
            }
            leaf description {
                type string;
            }
        }
    }
}
"""

dev_xr_yang = """module xr {
    yang-version "1.1";
    namespace "http://example.com/xr";
    prefix "xr";
    description "XR device";

    list interface {
        key name;
        leaf name {
            type string;
        }
        leaf description {
            type string;
        }
    }
}
"""


actor main(env):
    fc = file.FileCap(env.cap)
    wfc = file.WriteFileCap(fc)

    layers = [
        [netinfra_yang, l3vpn_yang],
        [nodes_yang],
        [oyang.rfs, oyang.ietf_inet_types, respnet_rfs_yang],
        [dev_junos_yang, dev_xr_yang],
    ]
    orchestron.build.gen_app(wfc, "respnet", "../src/", layers)

    env.exit(0)
