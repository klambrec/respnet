# WARNING WARNING WARNING WARNING WARNING
# DO NOT MODIFY THIS FILE!! This file is generated!
# WARNING WARNING WARNING WARNING WARNING

import orchestron.ttt as ttt
import yang.adata
import yang.gdata

from respnet.layers.y_1 import orchestron_rfs__rfs__base_config_entry
from respnet.layers.y_1 import orchestron_rfs__rfs__backbone_interface_entry

import respnet.rfs

class BaseConfig_Wrapper(respnet.rfs.BaseConfig):
    mut def transform_wrapper(self, i: yang.gdata.Node, device_info: ttt.DeviceInfo) -> yang.gdata.Node:
        """Wrap the user provided transform method to convert from gdata to
        modeled input and back to gdata
        """
        modeled_input = orchestron_rfs__rfs__base_config_entry.from_gdata(i)
        return self.transform(modeled_input, device_info).to_gdata()


class BBInterface_Wrapper(respnet.rfs.BBInterface):
    mut def transform_wrapper(self, i: yang.gdata.Node, device_info: ttt.DeviceInfo) -> yang.gdata.Node:
        """Wrap the user provided transform method to convert from gdata to
        modeled input and back to gdata
        """
        modeled_input = orchestron_rfs__rfs__backbone_interface_entry.from_gdata(i)
        return self.transform(modeled_input, device_info).to_gdata()


def create_list_entry_orchestron_rfs__rfs():
    return ttt.TTTContainer({"base-config": ttt.TTTList(BaseConfig_Wrapper), "backbone-interface": ttt.TTTList(BBInterface_Wrapper)})

def get_ttt() -> ttt.TTTNode:
    r = ttt.TTTContainer({"device": ttt.TTTList(ttt.TTTDevice), "rfs": ttt.TTTList(create_list_entry_orchestron_rfs__rfs)})
    return r
